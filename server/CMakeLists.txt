cmake_minimum_required(VERSION 2.6)

project(KetcherServer)

ENABLE_TESTING()

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/../../common/cmake/ ${CMAKE_CURRENT_SOURCE_DIR}/cmake/)

#set(KETCHER_THIRD_PARTY_LIBS_LOCATION $ENV{KETCHER_THIRD_PARTY_LIBS_LOCATION})
#if (NOT KETCHER_THIRD_PARTY_LIBS_LOCATION)
#    set(LIBS_LOCATION "http://ggasoftware.com/downloads/repo/" CACHE STRING "URL to directory with imago third party libs")
#else()
#    set(LIBS_LOCATION ${KETCHER_THIRD_PARTY_LIBS_LOCATION} CACHE STRING "URL to directory with imago third party libs")
#endif()
#message(STATUS ${LIBS_LOCATION})
set(THIRD_PARTY_DIR ${CMAKE_SOURCE_DIR}/third_party)
# if(MSVC)
# #We statically link to reduce dependancies
# foreach(flag_var CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO)
    # if(${flag_var} MATCHES "/MD")
        # string(REGEX REPLACE "/MD" "/MT" ${flag_var} "${${flag_var}}")
    # endif(${flag_var} MATCHES "/MD")
    # if(${flag_var} MATCHES "/MDd")
        # string(REGEX REPLACE "/MDd" "/MTd" ${flag_var} "${${flag_var}}")
    # endif(${flag_var} MATCHES "/MDd")
# endforeach(flag_var)
# endif(MSVC)

#INCLUDE(ConfigureCommon)

file(GLOB KetcherServer_src src/*.cpp)
file(GLOB KetcherServer_headers src/*.h)

include_directories(src)
add_subdirectory(../third_party/indigo/build_scripts/indigo-all "${CMAKE_CURRENT_BINARY_DIR}/indigo-all")
add_subdirectory(../third_party/boost "${CMAKE_CURRENT_BINARY_DIR}/boost")
# Download Boost
# set(BOOST_INCLUDE_DIR "${THIRD_PARTY_DIR}/boost")
# set(BOOST_LIBRARY_DIR "${THIRD_PARTY_DIR}/boost/${SYSTEM_NAME}/${SUBSYSTEM_NAME}")
# set(BOOST_HEADERS_FILENAME "boost_headers.zip")
# set(BOOST_LIBS_FILENAME "boost_libs_${SYSTEM_NAME}_${SUBSYSTEM_NAME}.zip")
# if(NOT EXISTS ${BOOST_INCLUDE_DIR})
#   if(NOT EXISTS ${THIRD_PARTY_DIR}/${BOOST_HEADERS_FILENAME})
#     message("Downloading boost headers from ${LIBS_LOCATION}")
#     file(DOWNLOAD ${LIBS_LOCATION}/${BOOST_HEADERS_FILENAME} ${THIRD_PARTY_DIR}/${BOOST_HEADERS_FILENAME} STATUS boost_headers_status SHOW_PROGRESS)
#     list(GET boost_headers_status 0 boost_header_status)
#     if(NOT boost_headers_status EQUAL 0)
#       message(FATAL_ERROR "Couldn't download boost headers!")
#     endif()
#   endif()
#   execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${BOOST_INCLUDE_DIR})
#   execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ${THIRD_PARTY_DIR}/${BOOST_HEADERS_FILENAME} WORKING_DIRECTORY ${BOOST_INCLUDE_DIR})
# endif()
# if(NOT EXISTS ${BOOST_LIBRARY_DIR})
#   if(NOT EXISTS ${THIRD_PARTY_DIR}/${BOOST_LIBS_FILENAME})
#     message("Downloading boost libs from ${LIBS_LOCATION}")
#     file(DOWNLOAD ${LIBS_LOCATION}/${BOOST_LIBS_FILENAME} ${THIRD_PARTY_DIR}/${BOOST_LIBS_FILENAME} STATUS boost_libs_status SHOW_PROGRESS)
#   endif()
#   execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${BOOST_LIBRARY_DIR})
#   execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ${THIRD_PARTY_DIR}/${BOOST_LIBS_FILENAME} WORKING_DIRECTORY ${BOOST_LIBRARY_DIR})
# endif()
# file(GLOB Boost_LIBRARIES "${BOOST_LIBRARY_DIR}/*${CMAKE_STATIC_LIBRARY_SUFFIX}")
# # Download Indigo
# set(INDIGO_DIR               "${THIRD_PARTY_DIR}/indigo")
# set(INDIGO_INCLUDE_DIR       "${INDIGO_DIR}/indigo")
# set(INDIGO_LIBS_RELEASE_DIR  "${INDIGO_DIR}/libs_release/${SYSTEM_NAME}/${SUBSYSTEM_NAME}")
# set(INDIGO_LIBS_DEBUG_DIR    "${INDIGO_DIR}/libs_debug/${SYSTEM_NAME}/${SUBSYSTEM_NAME}")
# set(INDIGO_LIBS_FILENAME     "indigo-libs-${SYSTEM_NAME}-${SUBSYSTEM_NAME}.zip")
# set(INDIGO_LIBS_LOCATION     "${LIBS_LOCATION}/indigo/c_static/")
# set(INDIGO_HEADERS_FILENAME  "indigo-headers.zip")
#if(NOT EXISTS ${INDIGO_INCLUDE_DIR})
#  if(NOT EXISTS ${THIRD_PARTY_DIR}/${INDIGO_HEADERS_FILENAME})
#    message("Downloading Indigo headers from ${LIBS_LOCATION}")
#    file(DOWNLOAD ${INDIGO_LIBS_LOCATION}/${INDIGO_HEADERS_FILENAME} ${THIRD_PARTY_DIR}/${INDIGO_HEADERS_FILENAME} STATUS indigo_headers_status SHOW_PROGRESS)
#    list(GET indigo_headers_status 0 indigo_header_status)
#    if(NOT indigo_headers_status EQUAL 0)
#      message(FATAL_ERROR "Couldn't download indigo headers!")
#    endif()
#  endif()
#  execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${INDIGO_INCLUDE_DIR})
#  execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ${THIRD_PARTY_DIR}/${INDIGO_HEADERS_FILENAME} WORKING_DIRECTORY ${INDIGO_INCLUDE_DIR})
#endif()
#if(NOT EXISTS ${THIRD_PARTY_DIR}/${INDIGO_LIBS_FILENAME})
#  message("Downloading Indigo libs from ${INDIGO_LIBS_LOCATION}/${INDIGO_LIBS_FILENAME}")
#  file(DOWNLOAD ${INDIGO_LIBS_LOCATION}/${INDIGO_LIBS_FILENAME} ${THIRD_PARTY_DIR}/${INDIGO_LIBS_FILENAME} STATUS indigo_libs_status SHOW_PROGRESS)
#endif()
#execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${INDIGO_DIR})
#execute_process(COMMAND ${CMAKE_COMMAND} -E tar xf ${THIRD_PARTY_DIR}/${INDIGO_LIBS_FILENAME} WORKING_DIRECTORY ${INDIGO_DIR})
#file(GLOB Indigo_LIBRARIES "${INDIGO_LIBS_RELEASE_DIR}/*${CMAKE_STATIC_LIBRARY_SUFFIX}")
# To avoid problem with library order we specify them twice or even more
set(Boost_LIBRARIES boost_date_time boost_filesystem boost_program_options boost_system boost_thread boost_chrono)
set(Indigo_LIBRARIES indigo indigo-inchi indigo-renderer inchi png z pixman cairo tinyxml molecule layout graph reaction common render2d)
set(Indigo_LIBRARIES ${Indigo_LIBRARIES} ${Indigo_LIBRARIES} ${Indigo_LIBRARIES})


include_directories(${BOOST_INCLUDE_DIR})
include_directories(../third_party/indigo/common)
include_directories(../third_party/indigo/api)
include_directories(../third_party/indigo/api/plugins/renderer)
include_directories(../third_party/indigo/api/plugins/inchi)
include_directories(../third_party/boost/include)
message(STATUS ${INDIGO_INCLUDE_DIR})

add_library(ketcher-server-shared SHARED ${KetcherServer_src} ${KetcherServer_headers})
target_link_libraries(ketcher-server-shared ${Indigo_LIBRARIES} ${Boost_LIBRARIES})

if(APPLE)
    SET_TARGET_PROPERTIES(ketcher-server-shared PROPERTIES LINK_FLAGS "-Xlinker -framework -Xlinker ApplicationServices")
endif()

PACK_SHARED(ketcher-server-shared)

add_executable(ketcher-server-test test/ks_test.cpp)
target_link_libraries(ketcher-server-test ketcher-server-shared)

add_test(NAME ketcher-server-test COMMAND ketcher-server-test)

SET(CMAKE_INSTALL_PREFIX "install") 
SET(CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS_SKIP TRUE)
INCLUDE(InstallRequiredSystemLibraries)
FOREACH(lib ${CMAKE_INSTALL_SYSTEM_RUNTIME_LIBS})
	INSTALL(FILES ${lib} DESTINATION "shared/${SYSTEM_NAME}/${SUBSYSTEM_NAME}" COMPONENT shared)
ENDFOREACH() 
